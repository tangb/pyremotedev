#!/usr/bin/env python
# -*- coding: utf-8 -*-

from pyremotedev import pyremotedev

logging.basicConfig(level=logging.INFO, format=u'%(asctime)s %(levelname)s : %(message)s')

APP_NAME = os.path.splitext(__file__)[0]
APP_AUTHOR = u'tangb'

#main logger
logger = logging.getLogger(u'main')

def reset_logging(level):
    """
    Reset main logging
    """
    for handler in logging.root.handlers[:]:
        logging.root.removeHandler(handler)

    logging.basicConfig(level=level, format=u'%(asctime)s %(levelname)s : %(message)s')

def usage(error=''):
    """
    Application usage
    Args:
        error (string): error message to display
    """
    if len(error) > 0:
        print(u'Error: %s' % error)
        print(u'')
        print(u'Usage: pyremotedev --master|--slave -D|--dir "directory to watch" <-c|--conf "config filepath"> <-p|--prof "profile"> <-d|--debug> <-h|--help>')
        print(u' -m|--master: launch remotesync as master, files from watched directory will be sent to remote slave.')
        print(u' -s|--slave: launch remotesync as slave, app will wait for sync operations.')
        print(u' -c|--conf: configuration filepath. If not specify use user home dir one')
        print(u' -p|--prof: profile name to launch (doesn\'t launch wizard)')
        print(u' -d|--debug: enable debug.')
        print(u' -v|--version: display version.')
        print(u' -h|--help: display this help.')

def version():
    """
    Display version
    """
    print(u'%s version %s' % (os.path.splitext(__file__)[0], pyremotedev.VERSION))

def application_parameters():
    """
    Parse command line and return list of application parameters

    Return:
        dict: list of application parameters::
            {
                master (bool): True if application is launched as master
                slave (bool): True if application is launched as slave
                debug (bool): True if debug enabled
                conf (string): Path of config file to open
                prof (string): profile name to launch (drop startup select wizard)
            }
    """
    params = {
        u'master': False,
        u'slave': False,
        u'debug': False,
        u'conf' : None,
        u'prof': None
    }

    try:
        opts, args = getopt.getopt(sys.argv[1:], u'mshdc:vp:', [u'master', u'slave', u'help', u'debug', u'conf=', u'version', u'prof='])

        for opt, arg in opts:
            if opt in (u'-m', u'--master'):
                if params[u'slave']:
                    raise Exception(u'You can\'t enable both slave and master mode')
                params[u'master'] = True
            elif opt in (u'-m', u'--slave'):
                if params['master']:
                    raise Exception(u'You can\'t enable both slave and master mode')
                params[u'slave'] = True
            elif opt in (u'-h', u'--help'):
                usage()
                sys.exit(2)
            elif opt in (u'-d', u'--debug'):
                params[u'debug'] = True
            elif opt in (u'-c', u'--conf'):
                params[u'conf'] = arg
                if not os.path.exists(params[u'conf']):
                    raise Exception(u'Specified config file does not exist (%s)' % params[u'conf'])
            elif opt in (u'-v', u'--version'):
                version()
                sys.exit(2)
            elif opt in (u'-p', u'--prof'):
                params[u'prof'] = arg
                #profile existence will be checked later

        #check some parameters
        if not params[u'master'] and not params[u'slave']:
            raise Exception(u'You must launch application as master or slave')

        #default config path
        if params[u'conf'] is None:
            path = user_data_dir(APP_NAME, APP_AUTHOR)
            if params[u'master']:
                params[u'conf'] = os.path.join(path, u'master.conf')
            else:
                params[u'conf'] = os.path.join(path, u'slave.conf')

    except Exception as e:
        #logger.exception('Error parsing command line arguments:')
        usage(str(e))
        sys.exit(1)

    return params

def load_profile(params):
    """
    Load profile to run

    Args:
        params (dict): application parameters
    """
    #load conf according to master/slave switch
    if params[u'master']:
        conf = pyremotedev.MasterConfigFile(params[u'conf'])
    else:
        conf = pyremotedev.SlaveConfigFile(params[u'conf'])

    profile = None
    if params[u'prof'] is None:
        #show profile wizard
        profile = conf.select_profile()
        logger.debug(u'Selected profile: %s' % profile)
    else:
        #profile selected from command line
        profiles = conf.load()
        if params[u'prof'] not in profiles.keys():
            logger.fatal(u'Profile "%s" does not exist.' % params[u'prof'])
            sys.exit(1)
        profile = profiles[params[u'prof']]
        logger.debug(u'Selected profile: %s' % profile)

    return profile

#get application parameters
params = application_parameters()

#reset logging
if params[u'debug']:
    reset_logging(logging.DEBUG)

#load application profile
profile = load_profile(params)

if params[u'master']:
    #local side: supposed to be the place where developper is working on
    try:
        master = pyremotedev.RemotePyDevMaster()
        master.start()
        while master.isAlive():
            master.join(1.0)

    except KeyboardInterrupt:
        pass

    except:
        logger.exception(u'Exception occured during master exceution:')

    finally:
        logger.info(u'Stopping application...')
        master.stop()

    master.join()

else:
    #remote side: supposed to the place where files must be updated (ie a raspberry pi)
    try:
        slave = pyremotedev.RemotePyDevSlave()
        slave.start()
        while True:
            time.sleep(1.0)

    except KeyboardInterrupt:
        pass

    except:
        logger.exception(u'Exception occured during slave execution:')

    finally:
        logger.info(u'Stopping application...')
        slave.stop()

    slave.join()
